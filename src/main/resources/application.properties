# HTTPS CONFIGURATION
server.port: ${SERVER_PORT}
server.tomcat.remote_ip_header=x-your-remote-ip-header
server.tomcat.protocol_header=x-your-protocol-header
server.error.include-stacktrace=${SERVER_ERROR_INCLUDE-STACKTRACE}
server.servlet.context-path=${SERVER_SERVLET_CONTEXT-PATH} # Server api path

# SSL
server.ssl.enabled = ${SERVER_SSL_ENABLED}
server.ssl.key-store = ${SERVER_SSL_KEY-STORE}
server.ssl.key-store-type = ${SERVER_SSL_KEY-STORE-TYPE}
server.ssl.key-alias = ${SERVER_SSL_KEY-ALIAS}
server.ssl.key-store-password = ${SERVER_SSL_KEY-STORE-PASSWORD}

# Database
spring.datasource.driverClassName=${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
spring.datasource.maxActive=${SPRING_DATASOURCE_MAXACTIVE}
spring.datasource.maxIdle=${SPRING_DATASOURCE_MAXIDLE}
spring.datasource.minIdle=${SPRING_DATASOURCE_MINIDLE}
spring.datasource.initialSize=${SPRING_DATASOURCE_INITIAL_SIZE}
spring.datasource.removeAbandoned=${SPRING_DATASOURCE_REMOVE_ABANDONED}
spring.datasource.platform = ${SPRING_DATASOURCE_PLATFORM}
spring.datasource.url = jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?currentSchema=${DATABASE_CURRENT_SCHEMA}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}

# JPA
spring.jpa.database = POSTGRESQL
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql = false
spring.jpa.generate-ddl = true
#spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true

# LOGGING LEVELS
spring.output.ansi.enabled=always
logging.level.root=WARN
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
logging.level.gr.uoa.di.rent=DEBUG

## MULTIPART (MultipartProperties)

# Enable multipart uploads
spring.servlet.multipart.enabled=${SPRING_SERVLET_MULTIPART_ENABLED}

# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=${SPRING_SERVLET_MULTIPART.FILE-SIZE-THRESHOLD}

# Max file size.
spring.servlet.multipart.max-file-size=${SPRING_SERVLET_MULTIPART_MAX-FILE-SIZE}

# Max Request Size
spring.servlet.multipart.max-request-size=${SPRING_SERVLET_MULTIPART_MAX-REQUEST-SIZE}

## File Storage Properties

# All files uploaded through the REST API will be stored in this directory (your/dir)
file.upload-dir=${FILE_UPLOAD-DIR}
