# HTTPS CONFIGURATION
server.port: 8443
#server.ssl.enabled = false
#server.ssl.key-store = src/main/resources/keystore.p12
#server.ssl.key-store-type = PKCS12
#server.ssl.key-alias = tomcat
#server.ssl.key-store-password = rent_project

server.tomcat.remote_ip_header=x-your-remote-ip-header
server.tomcat.protocol_header=x-your-protocol-header
server.error.include-stacktrace=never

# HTTP CONFIGURATION
#server.port = 8080

# Server api path
server.servlet.context-path=/api

# Database
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.maxActive=10
spring.datasource.maxIdle=5
spring.datasource.minIdle=2
spring.datasource.initialSize=5
spring.datasource.removeAbandoned=true

spring.datasource.platform = postgres
spring.datasource.url = jdbc:${DATABASE_URL}?currentSchema=rent
#spring.datasource.username = ${DATABASE_URL}
#spring.datasource.password = ${DB_USER_PASSWORD}

spring.jpa.database = POSTGRESQL
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql = false
spring.jpa.generate-ddl = true
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true

# LOGGING LEVELS
spring.output.ansi.enabled=always
logging.level.root=WARN
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
logging.level.gr.uoa.di.rent=DEBUG

## MULTIPART (MultipartProperties)

# Enable multipart uploads
spring.servlet.multipart.enabled=true

# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB

# Max file size.
spring.servlet.multipart.max-file-size=200MB

# Max Request Size
spring.servlet.multipart.max-request-size=215MB

## File Storage Properties

# All files uploaded through the REST API will be stored in this directory (your/dir)
file.upload-dir=./uploads
